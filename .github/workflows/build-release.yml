name: Build and Release JAR

on:
  schedule:
    # Run every 12 hours (at 00:00 and 12:00 UTC)
    - cron: '0 0,12 * * *'
  workflow_dispatch:
    # Allow manual triggering

permissions:
  contents: write
  actions: read

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: Install Apache Ant
      run: |
        sudo apt-get update
        sudo apt-get install -y ant
        
    - name: Check for existing pre-release
      id: check_prerelease
      run: |
        # Get existing pre-releases
        PRERELEASE_COUNT=$(gh release list --limit 50 --json isPrerelease,tagName | jq '[.[] | select(.isPrerelease == true)] | length')
        echo "prerelease_count=$PRERELEASE_COUNT" >> $GITHUB_OUTPUT
        
        if [ "$PRERELEASE_COUNT" -gt 0 ]; then
          echo "Found $PRERELEASE_COUNT pre-release(s)"
          PRERELEASE_TAG=$(gh release list --limit 50 --json isPrerelease,tagName | jq -r '[.[] | select(.isPrerelease == true)] | first | .tagName')
          echo "prerelease_tag=$PRERELEASE_TAG" >> $GITHUB_OUTPUT
        else
          echo "No pre-releases found"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build JAR with Ant
      id: build
      run: |
        echo "Building JAR using ant clean jar..."
        if ant clean jar; then
          echo "Build successful"
          echo "build_success=true" >> $GITHUB_OUTPUT
          
          # Check if JAR file exists
          if [ -f "target/Shimeji-ee.jar" ]; then
            echo "JAR file created successfully: target/Shimeji-ee.jar"
            JAR_SIZE=$(stat -c%s "target/Shimeji-ee.jar")
            echo "JAR file size: $JAR_SIZE bytes"
          else
            echo "Error: JAR file not found after build"
            echo "build_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        else
          echo "Build failed"
          echo "build_success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
    - name: Generate release info
      if: steps.build.outputs.build_success == 'true'
      id: release_info
      run: |
        # Generate timestamp for release
        TIMESTAMP=$(date '+%Y%m%d-%H%M%S')
        RELEASE_TAG="pre-release-$TIMESTAMP"
        RELEASE_NAME="Pre-release Build $TIMESTAMP"
        
        echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        
        # Generate release notes
        BUILD_TIME=$(date '+%Y-%m-%d %H:%M:%S UTC')
        cat > release_notes.md << EOF
        # Shimeji-ee Pre-release Build / Shimeji-ee 预发布版本
        
        **Build Date / 构建日期:** $BUILD_TIME  
        **Commit / 提交:** ${{ github.sha }}
        
        ## What's included / 包含内容:
        - Shimeji-ee.jar - Main executable JAR file / 主要可执行JAR文件
        - Shimeji-ee-prerelease.zip - Complete package with all dependencies / 包含所有依赖的完整包
        - lib/ folder with required libraries / 包含必需库文件的lib文件夹
        - conf/ folder with configuration files / 包含配置文件的conf文件夹
        - img/ folder with images / 包含图片的img文件夹
        
        ## Installation / 安装说明:
        ### Option 1: Use the complete package / 方式1：使用完整包
        1. Download Shimeji-ee-prerelease.zip / 下载 Shimeji-ee-prerelease.zip
        2. Extract to a folder / 解压到文件夹
        3. Make sure you have Java 8 or later installed / 确保已安装 Java 8 或更高版本
        4. Run with the command / 使用以下命令运行:
           
           **Windows:**
           \`\`\`
           java -cp "target\\Shimeji-ee.jar;lib\\*" com.group_finity.mascot.Main
           \`\`\`
           
           **Linux/Mac:**
           \`\`\`
           java -cp "target/Shimeji-ee.jar:lib/*" com.group_finity.mascot.Main
           \`\`\`
        
        ### Option 2: JAR file only (advanced users) / 方式2：仅JAR文件（高级用户）
        1. Download Shimeji-ee.jar / 下载 Shimeji-ee.jar
        2. You need to provide your own lib/, conf/, and img/ folders / 需要自己提供 lib/、conf/ 和 img/ 文件夹
        3. Use the same command as above / 使用上述相同命令
        
        ## Notes / 注意事项:
        This is an automated pre-release build generated at $BUILD_TIME. For stable releases, please check the main releases page.
        
        这是在 $BUILD_TIME 自动生成的预发布版本。如需稳定版本，请查看主要发布页面。
        
        ---
        *This release was automatically generated from commit ${{ github.sha }} / 此版本由提交 ${{ github.sha }} 自动生成*
        EOF
        
    - name: Delete existing pre-release
      if: steps.build.outputs.build_success == 'true' && steps.check_prerelease.outputs.prerelease_count > 0
      run: |
        echo "Deleting existing pre-release: ${{ steps.check_prerelease.outputs.prerelease_tag }}"
        gh release delete "${{ steps.check_prerelease.outputs.prerelease_tag }}" --yes
        
        # Also delete the tag
        git push --delete origin "${{ steps.check_prerelease.outputs.prerelease_tag }}" || true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create new pre-release
      if: steps.build.outputs.build_success == 'true'
      run: |
        echo "Creating new pre-release: ${{ steps.release_info.outputs.release_tag }}"
        
        # Create a zip file containing JAR and lib files
        zip -r Shimeji-ee-prerelease.zip target/Shimeji-ee.jar lib/ conf/ img/ *.txt *.md LICENSE MANIFEST.MF
        
        gh release create "${{ steps.release_info.outputs.release_tag }}" \
          --title "${{ steps.release_info.outputs.release_name }}" \
          --notes-file release_notes.md \
          --prerelease \
          Shimeji-ee-prerelease.zip target/Shimeji-ee.jar
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build failure notification
      if: steps.build.outputs.build_success == 'false'
      run: |
        echo "Build failed - no changes made to releases"
        echo "Please check the build logs for errors"
        exit 1
