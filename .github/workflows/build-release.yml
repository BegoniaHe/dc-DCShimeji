name: Build and Release JAR

on:
  schedule:
    # Run every 12 hours (at 00:00 and 12:00 UTC)
    - cron: '0 0,12 * * *'
  workflow_dispatch:
    # Allow manual triggering

permissions:
  contents: write
  actions: read

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: Install Apache Ant
      run: |
        sudo apt-get update
        sudo apt-get install -y ant
        
    - name: Check for existing pre-release
      id: check_prerelease
      run: |
        # Get existing pre-releases
        PRERELEASE_COUNT=$(gh release list --limit 50 --json isPrerelease,tagName | jq '[.[] | select(.isPrerelease == true)] | length')
        echo "prerelease_count=$PRERELEASE_COUNT" >> $GITHUB_OUTPUT
        
        if [ "$PRERELEASE_COUNT" -gt 0 ]; then
          echo "Found $PRERELEASE_COUNT pre-release(s)"
          PRERELEASE_TAG=$(gh release list --limit 50 --json isPrerelease,tagName | jq -r '[.[] | select(.isPrerelease == true)] | first | .tagName')
          echo "prerelease_tag=$PRERELEASE_TAG" >> $GITHUB_OUTPUT
        else
          echo "No pre-releases found"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build JAR with Ant
      id: build
      run: |
        echo "Building JAR using ant clean jar..."
        if ant clean jar; then
          echo "Build successful"
          echo "build_success=true" >> $GITHUB_OUTPUT
          
          # Check if JAR file exists
          if [ -f "target/Shimeji-ee.jar" ]; then
            echo "JAR file created successfully: target/Shimeji-ee.jar"
            JAR_SIZE=$(stat -c%s "target/Shimeji-ee.jar")
            echo "JAR file size: $JAR_SIZE bytes"
          else
            echo "Error: JAR file not found after build"
            echo "build_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        else
          echo "Build failed"
          echo "build_success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
    - name: Generate release info
      if: steps.build.outputs.build_success == 'true'
      id: release_info
      run: |
        # Generate timestamp for release
        TIMESTAMP=$(date '+%Y%m%d-%H%M%S')
        RELEASE_TAG="pre-release-$TIMESTAMP"
        RELEASE_NAME="Pre-release Build $TIMESTAMP"
        
        echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        
        # Generate release notes
        cat > release_notes.md << EOF
        # Shimeji-ee Pre-release Build
        
        **Build Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')
        **Commit:** ${{ github.sha }}
        
        ## What's included:
        - Shimeji-ee.jar - Main executable JAR file
        
        ## Installation:
        1. Download the Shimeji-ee.jar file
        2. Make sure you have Java 8 or later installed
        3. Run the JAR file with: \`java -jar Shimeji-ee.jar\`
        
        ## Notes:
        This is an automated pre-release build. For stable releases, please check the main releases page.
        
        ---
        *This release was automatically generated from commit ${{ github.sha }}*
        EOF
        
    - name: Delete existing pre-release
      if: steps.build.outputs.build_success == 'true' && steps.check_prerelease.outputs.prerelease_count > 0
      run: |
        echo "Deleting existing pre-release: ${{ steps.check_prerelease.outputs.prerelease_tag }}"
        gh release delete "${{ steps.check_prerelease.outputs.prerelease_tag }}" --yes
        
        # Also delete the tag
        git push --delete origin "${{ steps.check_prerelease.outputs.prerelease_tag }}" || true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create new pre-release
      if: steps.build.outputs.build_success == 'true'
      run: |
        echo "Creating new pre-release: ${{ steps.release_info.outputs.release_tag }}"
        gh release create "${{ steps.release_info.outputs.release_tag }}" \
          --title "${{ steps.release_info.outputs.release_name }}" \
          --notes-file release_notes.md \
          --prerelease \
          target/Shimeji-ee.jar
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build failure notification
      if: steps.build.outputs.build_success == 'false'
      run: |
        echo "Build failed - no changes made to releases"
        echo "Please check the build logs for errors"
        exit 1
