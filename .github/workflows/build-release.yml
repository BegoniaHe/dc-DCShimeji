name: Build and Release Platform-Specific Packages

on:
  schedule:
    # Run every 12 hours (at 00:00 and 12:00 UTC)
    - cron: '0 0,12 * * *'
  workflow_dispatch:
    # Allow manual triggering

permissions:
  contents: write
  actions: read

jobs:
  build-jar:
    runs-on: ubuntu-latest
    outputs:
      jar-artifact: ${{ steps.upload.outputs.artifact-id }}
      build-success: ${{ steps.build.outputs.build_success }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: Install Apache Ant
      run: |
        sudo apt-get update
        sudo apt-get install -y ant
        
    - name: Build JAR with Ant
      id: build
      run: |
        echo "Building JAR using ant clean jar..."
        if ant clean jar; then
          echo "Build successful"
          echo "build_success=true" >> $GITHUB_OUTPUT
          
          # Check if JAR file exists
          if [ -f "target/Shimeji-ee.jar" ]; then
            echo "JAR file created successfully: target/Shimeji-ee.jar"
            JAR_SIZE=$(stat -c%s "target/Shimeji-ee.jar")
            echo "JAR file size: $JAR_SIZE bytes"
          else
            echo "Error: JAR file not found after build"
            echo "build_success=false" >> $GITHUB_OUTPUT
            exit 1
          fi
        else
          echo "Build failed"
          echo "build_success=false" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Upload JAR artifact
      id: upload
      if: steps.build.outputs.build_success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: shimeji-jar
        path: |
          target/Shimeji-ee.jar
          lib/
          conf/
          img/
          *.txt
          *.md
          LICENSE
          MANIFEST.MF
        retention-days: 1

  build-platform-packages:
    needs: build-jar
    if: needs.build-jar.outputs.build-success == 'true'
    strategy:
      matrix:
        include:
          - platform: windows-x64
            os: windows-latest
            jre-arch: x64
            jre-os: windows
            script-ext: .bat
            zip-name: Shimeji-ee-windows-x64
          - platform: windows-x86
            os: windows-latest
            jre-arch: x86-32
            jre-os: windows
            script-ext: .bat
            zip-name: Shimeji-ee-windows-x86
          - platform: macos-x64
            os: macos-latest
            jre-arch: x64
            jre-os: mac
            script-ext: .sh
            zip-name: Shimeji-ee-macos-x64

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: shimeji-jar
        
    - name: Download JRE 8
      id: download-jre
      run: |
        if [ "${{ matrix.jre-os }}" = "windows" ]; then
          if [ "${{ matrix.jre-arch }}" = "x86-32" ]; then
            JRE_URL="https://github.com/adoptium/temurin8-binaries/releases/download/jdk8u422-b05/OpenJDK8U-jre_x86-32_windows_hotspot_8u422b05.zip"
          else
            JRE_URL="https://github.com/adoptium/temurin8-binaries/releases/download/jdk8u422-b05/OpenJDK8U-jre_x64_windows_hotspot_8u422b05.zip"
          fi
        else
          JRE_URL="https://github.com/adoptium/temurin8-binaries/releases/download/jdk8u422-b05/OpenJDK8U-jre_x64_mac_hotspot_8u422b05.tar.gz"
        fi
        
        echo "Downloading JRE from: $JRE_URL"
        if [ "${{ matrix.jre-os }}" = "windows" ]; then
          curl -L -o jre.zip "$JRE_URL"
        else
          curl -L -o jre.tar.gz "$JRE_URL"
        fi
      shell: bash
        
    - name: Extract JRE
      run: |
        mkdir -p jre
        mkdir -p jre_temp
        if [ "${{ matrix.jre-os }}" = "windows" ]; then
          if command -v unzip >/dev/null 2>&1; then
            unzip -q jre.zip -d jre_temp
          else
            powershell -Command "Expand-Archive -Path jre.zip -DestinationPath jre_temp"
          fi
          # Find the JRE directory and move it to jre/
          JRE_DIR=$(find jre_temp -name "jdk8u*" -type d | head -1)
          if [ -n "$JRE_DIR" ]; then
            mv "$JRE_DIR"/* jre/ 2>/dev/null || cp -r "$JRE_DIR"/* jre/
          fi
        else
          tar -xzf jre.tar.gz -C jre_temp
          # Find the JRE directory and move it to jre/
          JRE_DIR=$(find jre_temp -name "jdk8u*" -type d | head -1)
          if [ -n "$JRE_DIR" ]; then
            mv "$JRE_DIR"/* jre/
          fi
        fi
        
        # Clean up
        rm -rf jre_temp
        if [ "${{ matrix.jre-os }}" = "windows" ]; then
          rm jre.zip
        else
          rm jre.tar.gz
        fi
      shell: bash
        
    - name: Create startup script
      run: |
        if [ "${{ matrix.jre-os }}" = "windows" ]; then
          cat > "run_shimeji${{ matrix.script-ext }}" << 'EOF'
        @echo off
        cd /d "%~dp0"
        echo Starting Shimeji-ee...
        echo 正在启动 Shimeji-ee...
        
        if not exist "jre\bin\java.exe" (
            echo Error: JRE not found! Please make sure the jre folder exists.
            echo 错误：未找到JRE！请确保jre文件夹存在。
            pause
            exit /b 1
        )
        
        if not exist "target\Shimeji-ee.jar" (
            echo Error: Shimeji-ee.jar not found! Please make sure the target folder exists.
            echo 错误：未找到Shimeji-ee.jar！请确保target文件夹存在。
            pause
            exit /b 1
        )
        
        "jre\bin\java.exe" -cp "target\Shimeji-ee.jar;lib\*" com.group_finity.mascot.Main
        
        if errorlevel 1 (
            echo.
            echo Shimeji-ee exited with an error.
            echo Shimeji-ee 运行出现错误。
            pause
        )
        EOF
        else
          cat > "run_shimeji${{ matrix.script-ext }}" << 'EOF'
        #!/bin/bash
        cd "$(dirname "$0")"
        echo "Starting Shimeji-ee..."
        echo "正在启动 Shimeji-ee..."
        
        if [ ! -f "jre/bin/java" ]; then
            echo "Error: JRE not found! Please make sure the jre folder exists."
            echo "错误：未找到JRE！请确保jre文件夹存在。"
            read -p "Press Enter to exit..."
            exit 1
        fi
        
        if [ ! -f "target/Shimeji-ee.jar" ]; then
            echo "Error: Shimeji-ee.jar not found! Please make sure the target folder exists."
            echo "错误：未找到Shimeji-ee.jar！请确保target文件夹存在。"
            read -p "Press Enter to exit..."
            exit 1
        fi
        
        "./jre/bin/java" -cp "target/Shimeji-ee.jar:lib/*" com.group_finity.mascot.Main
        
        if [ $? -ne 0 ]; then
            echo ""
            echo "Shimeji-ee exited with an error."
            echo "Shimeji-ee 运行出现错误。"
            read -p "Press Enter to exit..."
        fi
        EOF
          chmod +x "run_shimeji${{ matrix.script-ext }}"
        fi
      shell: bash
      
    - name: Create README
      run: |
        cat > "README_${{ matrix.platform }}.md" << EOF
        # Shimeji-ee - ${{ matrix.platform }} Portable Version
        # Shimeji-ee - ${{ matrix.platform }} 便携版
        
        This is a portable version of Shimeji-ee that includes Java Runtime Environment (JRE 8) so you don't need to install Java separately.
        
        这是 Shimeji-ee 的便携版本，内置了 Java 运行环境 (JRE 8)，无需单独安装 Java。
        
        ## How to run / 如何运行:
        
        ### Windows:
        Double-click \`run_shimeji.bat\` or run it from command prompt.
        双击 \`run_shimeji.bat\` 或在命令提示符中运行。
        
        ### macOS/Linux:
        1. Open Terminal and navigate to this folder
           打开终端并导航到此文件夹
        2. Run: \`./run_shimeji.sh\`
           运行：\`./run_shimeji.sh\`
        
        ## Folder structure / 文件夹结构:
        - \`jre/\` - Java Runtime Environment / Java 运行环境
        - \`target/\` - Contains Shimeji-ee.jar / 包含 Shimeji-ee.jar
        - \`lib/\` - Required libraries / 必需的库文件
        - \`conf/\` - Configuration files / 配置文件
        - \`img/\` - Images and mascot sprites / 图片和吉祥物精灵
        - \`run_shimeji${{ matrix.script-ext }}\` - Startup script / 启动脚本
        
        ## Troubleshooting / 故障排除:
        
        If the program doesn't start:
        如果程序无法启动：
        
        1. Make sure all folders are present (jre, target, lib, conf, img)
           确保所有文件夹都存在 (jre, target, lib, conf, img)
        2. Check that you have sufficient permissions to run the script
           检查是否有足够的权限运行脚本
        3. On macOS, you might need to allow the app in System Preferences > Security & Privacy
           在 macOS 上，您可能需要在系统偏好设置 > 安全性与隐私中允许该应用
        
        ## Platform Information / 平台信息:
        - Platform / 平台: ${{ matrix.platform }}
        - JRE Architecture / JRE 架构: ${{ matrix.jre-arch }}
        - JRE Version / JRE 版本: OpenJDK 8u422-b05
        
        For more information, visit: https://github.com/BegoniaHe/dc-DCShimeji
        更多信息请访问：https://github.com/BegoniaHe/dc-DCShimeji
        EOF
      shell: bash
      
    - name: Create platform package
      run: |
        # Create the platform-specific zip
        if [ "${{ matrix.jre-os }}" = "windows" ]; then
          if command -v zip >/dev/null 2>&1; then
            zip -r "${{ matrix.zip-name }}.zip" jre/ target/ lib/ conf/ img/ run_shimeji${{ matrix.script-ext }} README_${{ matrix.platform }}.md *.txt LICENSE MANIFEST.MF
          else
            powershell -Command "Compress-Archive -Path 'jre', 'target', 'lib', 'conf', 'img', 'run_shimeji${{ matrix.script-ext }}', 'README_${{ matrix.platform }}.md', '*.txt', 'LICENSE', 'MANIFEST.MF' -DestinationPath '${{ matrix.zip-name }}.zip'"
          fi
        else
          zip -r "${{ matrix.zip-name }}.zip" jre/ target/ lib/ conf/ img/ run_shimeji${{ matrix.script-ext }} README_${{ matrix.platform }}.md *.txt LICENSE MANIFEST.MF
        fi
      shell: bash
      
    - name: Upload platform package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.zip-name }}
        path: ${{ matrix.zip-name }}.zip
        retention-days: 1

  create-release:
    needs: [build-jar, build-platform-packages]
    runs-on: ubuntu-latest
    if: needs.build-jar.outputs.build-success == 'true'
    
    steps:
    - name: Checkout code (for release notes)
      uses: actions/checkout@v4
      
    - name: Download all platform packages
      uses: actions/download-artifact@v4
      with:
        pattern: Shimeji-ee-*
        merge-multiple: true
        
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: shimeji-jar
        
    - name: Check for existing pre-release
      id: check_prerelease
      run: |
        # Get existing pre-releases
        PRERELEASE_COUNT=$(gh release list --limit 50 --json isPrerelease,tagName | jq '[.[] | select(.isPrerelease == true)] | length')
        echo "prerelease_count=$PRERELEASE_COUNT" >> $GITHUB_OUTPUT
        
        if [ "$PRERELEASE_COUNT" -gt 0 ]; then
          echo "Found $PRERELEASE_COUNT pre-release(s)"
          PRERELEASE_TAG=$(gh release list --limit 50 --json isPrerelease,tagName | jq -r '[.[] | select(.isPrerelease == true)] | first | .tagName')
          echo "prerelease_tag=$PRERELEASE_TAG" >> $GITHUB_OUTPUT
        else
          echo "No pre-releases found"
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Generate release info
      id: release_info
      run: |
        # Generate timestamp for release
        TIMESTAMP=$(date '+%Y%m%d-%H%M%S')
        RELEASE_TAG="pre-release-$TIMESTAMP"
        RELEASE_NAME="Pre-release Build $TIMESTAMP"
        
        echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        
        # Generate release notes
        BUILD_TIME=$(date '+%Y-%m-%d %H:%M:%S UTC')
        cat > release_notes.md << EOF
        # Shimeji-ee Pre-release Build / Shimeji-ee 预发布版本
        
        **Build Date / 构建日期:** $BUILD_TIME  
        **Commit / 提交:** ${{ github.sha }}
        
        ## What's included / 包含内容:
        
        ### Platform-specific packages with embedded JRE / 包含嵌入式JRE的平台特定包:
        - **Shimeji-ee-windows-x64.zip** - Windows 64-bit with JRE 8 / Windows 64位版本，含JRE 8
        - **Shimeji-ee-windows-x86.zip** - Windows 32-bit with JRE 8 / Windows 32位版本，含JRE 8  
        - **Shimeji-ee-macos-x64.zip** - macOS Intel with JRE 8 / macOS Intel版本，含JRE 8
        
        ### JAR file for advanced users / 高级用户JAR文件:
        - **Shimeji-ee.jar** - Main executable JAR file / 主要可执行JAR文件
        - **Shimeji-ee-prerelease.zip** - Complete package with dependencies / 包含所有依赖的完整包
        
        ## Installation / 安装说明:
        
        ### Recommended: Platform-specific packages / 推荐：平台特定包
        1. Download the appropriate package for your system / 下载适合您系统的包
        2. Extract to a folder / 解压到文件夹
        3. Run the startup script / 运行启动脚本:
           - **Windows**: Double-click \`run_shimeji.bat\` / 双击 \`run_shimeji.bat\`
           - **macOS/Linux**: Run \`./run_shimeji.sh\` in Terminal / 在终端运行 \`./run_shimeji.sh\`
        
        **No Java installation required! / 无需安装Java！**
        
        ### Advanced: JAR file only / 高级：仅JAR文件
        1. Download Shimeji-ee-prerelease.zip / 下载 Shimeji-ee-prerelease.zip
        2. Extract to a folder / 解压到文件夹
        3. Make sure you have Java 8 or later installed / 确保已安装 Java 8 或更高版本
        4. Run with the command / 使用以下命令运行:
           
           **Windows:**
           \`\`\`
           java -cp "target\\Shimeji-ee.jar;lib\\*" com.group_finity.mascot.Main
           \`\`\`
           
           **Linux/Mac:**
           \`\`\`
           java -cp "target/Shimeji-ee.jar:lib/*" com.group_finity.mascot.Main
           \`\`\`
        
        ## Notes / 注意事项:
        - Platform packages include OpenJDK 8u422-b05 / 平台包包含 OpenJDK 8u422-b05
        - All packages are portable and don't require installation / 所有包都是便携的，无需安装
        - On macOS, you might need to allow the app in Security & Privacy settings / 在 macOS 上，您可能需要在安全性与隐私设置中允许该应用
        - **Note for ARM64 users**: JRE 8 is not available for ARM64 architecture (Windows ARM64, macOS Apple Silicon). Please use the JAR version with a newer JRE, or use compatibility layers (Rosetta 2 on macOS, x86 emulation on Windows).
        - **ARM64 用户注意**: ARM64 架构（Windows ARM64、macOS Apple Silicon）没有可用的 JRE 8。请使用较新 JRE 的 JAR 版本，或使用兼容层（macOS 上的 Rosetta 2，Windows 上的 x86 模拟）。
        
        This is an automated pre-release build generated at $BUILD_TIME. For stable releases, please check the main releases page.
        
        这是在 $BUILD_TIME 自动生成的预发布版本。如需稳定版本，请查看主要发布页面。
        
        ---
        *This release was automatically generated from commit ${{ github.sha }} / 此版本由提交 ${{ github.sha }} 自动生成*
        EOF
        
    - name: Create JAR-only package
      run: |
        # Create a zip file containing JAR and lib files for advanced users
        zip -r Shimeji-ee-prerelease.zip target/Shimeji-ee.jar lib/ conf/ img/ *.txt *.md LICENSE MANIFEST.MF
        
    - name: Delete existing pre-release
      if: steps.check_prerelease.outputs.prerelease_count > 0
      run: |
        echo "Deleting existing pre-release: ${{ steps.check_prerelease.outputs.prerelease_tag }}"
        gh release delete "${{ steps.check_prerelease.outputs.prerelease_tag }}" --yes
        
        # Also delete the tag
        git push --delete origin "${{ steps.check_prerelease.outputs.prerelease_tag }}" || true
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create new pre-release
      run: |
        echo "Creating new pre-release: ${{ steps.release_info.outputs.release_tag }}"
        
        gh release create "${{ steps.release_info.outputs.release_tag }}" \
          --title "${{ steps.release_info.outputs.release_name }}" \
          --notes-file release_notes.md \
          --prerelease \
          Shimeji-ee-windows-x64.zip \
          Shimeji-ee-windows-x86.zip \
          Shimeji-ee-macos-x64.zip \
          Shimeji-ee-prerelease.zip \
          target/Shimeji-ee.jar
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
